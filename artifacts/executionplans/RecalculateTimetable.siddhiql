/* Enter a unique ExecutionPlan */
@Plan:name('RecalculateTimetable')

/* Enter a unique description for ExecutionPlan */
-- @Plan:description('ExecutionPlan')

/* define streams/tables and write queries here ... */
@Import('timeTriggerStream:1.0.0')
define stream tsTrigger (invoke bool, timeStamp long);

@Import('vehicleSpatialEvents:1.0.0')
define stream vehicleSpatialEvents (id string, name string, direction int, latitude double, longitude double, timeStamp long, type string, speed float, heading float, eventId string, state string, information string);

@From(eventtable='rdbms', datasource.name='WSO2_GEO_DB', table.name='StopTable')
define table stopTable (id string, name string, direction int, latitude double, longitude double);

@From(eventtable='rdbms', datasource.name='WSO2_GEO_DB', table.name='BusStopTimeTable')
define table busTimeTable (id string, name string, direction int, t_day string, t_hour int, t_minute int, minutesInDay int);

define trigger stopTableTrigger at 'start';

from stopTableTrigger join stopTable
select str:concat("s-",direction,"-",id) as id, latitude, longitude, 0l as timeStamp
insert into preProximityStream;

from vehicleSpatialEvents 
select str:concat("b-",direction,"-",id) as id, latitude, longitude, timeStamp
insert into preProximityStream;

from preProximityStream#geo:proximity(id, latitude, longitude, 10.0)
select id, latitude, longitude, inCloseProximity, proximityWith, timeStamp
having str:contains(id, "b-") AND str:contains(proximityWith, "s-") AND ((str:contains(proximityWith, "-1-") AND str:contains(id, "-1-")) 
																	   OR (str:contains(proximityWith, "-2-") AND str:contains(id, "-2-")))
insert into proximityStream;

from proximityStream 
select str:substr(proximityWith, 4) as stopId, str:substr(id, 4) as busId, timeStamp, inCloseProximity as isArrived 
insert into stopArivalStream;

from every e1 = stopArivalStream[isArrived == true] -> e2 = stopArivalStream[(e1.stopId == e2.stopId) AND (e2.isArrived != true)]
select e1.stopId as id, (e1.timeStamp + e2[0].timeStamp) / 2 as timeStamp
insert into timeTableStream;

from timeTableStream as t join stopTable as s
on s.id == t.id
select t.id as id, s.name as name, s.direction as direction, 'Monday' as t_day, time:extract(t.timeStamp,'HOUR') as t_hour, time:extract(t.timeStamp, 'MINUTE') as t_minute
insert into preTimeTable;

from preTimeTable
select id, name, direction, t_day, t_hour, t_minute, (t_hour * 60 + t_minute) as minutesInDay
insert into busTimeTable;