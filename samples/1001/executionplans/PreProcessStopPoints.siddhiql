/* Enter a unique ExecutionPlan */
@Plan:name('PreProcessStopPoints')

/* Enter a unique description for ExecutionPlan */
-- @Plan:description('ExecutionPlan')

/* define streams/tables and write queries here ... */

@Import('timeTriggerStream:1.0.0')
define stream timeTriggerStream (invoke bool, timeStamp long);

@Import('vehicleSpatialEvents:1.0.0')
define stream vehicleSpatialEvents (id string, name string, direction int, latitude double, longitude double, timeStamp long, type string, speed float, heading float, eventId string, state string, information string);

@Import('rawTimetableStream:1.0.0')
define stream timeTableStream (id string, name string, direction int, t_day string, t_hour int, t_minute int);

@Import('rawStopPointStream:1.0.0')
define stream stopPointStream (id string, name string, direction int, latitude double, longitude double);

@Export('fusedSpatialEvent:1.0.0')
define stream fusedStream (id string, name string, direction int, latitude double, longitude double, timeStamp long, type string, speed float, heading float, state string, information string, notify bool);

@Export('delayStream:1.0.0')
define stream delayStream (delay long, id string, latitude double, longitude double, name string, timeStamp long);

@Export('lateAlertStream:1.0.0')
define stream lateAlertStream (timeStamp long, id string, latitude double, longitude double, name string, status string);

@From(eventtable='rdbms', datasource.name='WSO2_GEO_DB', table.name='BusStopTimeTable')
define table busTimeTable (id string, name string, direction int, t_day string, t_hour int, t_minute int, minutesInDay int);

@From(eventtable='rdbms', datasource.name='WSO2_GEO_DB', table.name='StopTable')
define table stopTable (id string, name string, direction int, latitude double, longitude double);

define table stopArivalTable (stopId string, busId string, timeStamp long, isArrived bool);

from stopPointStream
insert into stopTable;

from timeTableStream
select id, name, direction, t_day, t_hour, t_minute, (t_hour * 60 + t_minute) as minutesInDay
insert into busTimeTable;

from stopPointStream
select str:concat("s-",direction,"-",id) as id, latitude, longitude, 0l as timeStamp
insert into preProximityStream; 

from vehicleSpatialEvents 
select str:concat("b-",direction,"-",id) as id, latitude, longitude, timeStamp
insert into preProximityStream;

from preProximityStream#geo:proximity(id, latitude, longitude, 100.0)
select id, latitude, longitude, inCloseProximity, proximityWith, timeStamp
having str:contains(id, "b") AND str:contains(proximityWith, "s") AND ((str:contains(proximityWith, "-1-") AND str:contains(id, "-1-")) OR (str:contains(proximityWith, "-2-") AND str:contains(id, "-2-")))
insert into proximityStream;

from proximityStream 
select str:substr(proximityWith, 4) as stopId, str:substr(id, 4) as busId, timeStamp, inCloseProximity as isArrived 
insert into stopArivalTable;

from timeTriggerStream 
select time:extract(timeStamp,'HOUR') as t_hour, time:extract(timeStamp, 'MINUTE') as t_minute, timeStamp
insert into postTimeTriggerStream;

from postTimeTriggerStream join busTimeTable
on postTimeTriggerStream.t_hour == busTimeTable.t_hour AND postTimeTriggerStream.t_minute == busTimeTable.t_minute
select timeStamp, id as stopId, name as stopName, direction
insert into stopTriggerStream; 

from stopTriggerStream join stopArivalTable 
on stopTriggerStream.stopId == stopArivalTable.stopId
select stopTriggerStream.stopId, stopTriggerStream.timeStamp, stopArivalTable.timeStamp as lastArrivedTimestamp, stopArivalTable.isArrived
insert into lateDecisionStream;

from lateDecisionStream[isArrived!=true AND (timeStamp- lastArrivedTimestamp) > 60000]#window.length(1) join  stopTable
select timeStamp, stopTable.id, stopTable.latitude, stopTable.longitude, stopTable.name, "DELAYED" as status
insert into lateAlertStream; 

from e1=lateAlertStream -> e2=proximityStream[str:substr(proximityWith, 4) == e1.id]
select e2.timeStamp- e1.timeStamp as delay, e1.id, e1.latitude, e1.longitude, e1.name, e2.timeStamp
insert into delayStream;

from delayStream 
select timeStamp, id, latitude, longitude, name, "ON TIME" as status
insert into lateAlertStream;

from lateAlertStream
select id, name, 1 as direction, latitude, longitude, timeStamp, 'STOP' as type, 0f as speed, 0f as heading, status as state, str:concat("Bus arrived ", status) as information, false as notify
insert into fusedStream;