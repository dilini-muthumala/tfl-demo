/* Enter a unique ExecutionPlan */
@Plan:name('WaitTimeCalculation')

/* Enter a unique description for ExecutionPlan */
-- @Plan:description('ExecutionPlan')

/* define streams/tables and write queries here ... */

@Plan:trace('false')

@Import('timetableInputStream:1.0.0')
define stream timetableStream (id string, name string, direction int, timeStamp long, latitude double, longitude double, type string, t_day string, t_hour int, t_minute int);

@Import('processedSpatialEvents:1.0.0')
define stream processedSpatialEvents (id string, name string, direction int, latitude double, longitude double, timeStamp long, type string, speed float, heading float, eventId string, state string, information string);

@Export('waitingVehicles:1.0.0')
define stream waitingVehicles (id string, name string, direction int, latitude double, longitude double, arrivalTime long, waitTime long, type string, speed float, heading float, eventId string, state string, information string);

@Export('vehicleSpatialEvents:1.0.0')
define stream vehicleSpatialEvents (id string, name string, direction int, latitude double, longitude double, timeStamp long, type string, speed float, heading float, eventId string, state string, information string);

from processedSpatialEvents[type == 'VEHICLE'] 
insert into vehicleSpatialEvents;

partition with (id of vehicleSpatialEvents)
begin
	from every e1 = vehicleSpatialEvents[speed >= 1], e2 = vehicleSpatialEvents[e1.id == id and speed < 1]<1:>, e3 = vehicleSpatialEvents[e1.id == id and speed >= 1]
	select e1.id as id, e1.name as name, e1.direction as direction, e2[0].latitude as latitude, e2[0].longitude as longitude, e2[0].timeStamp as arrivalTime, (e3.timeStamp - e2[0].timeStamp) as waitTime, e1.type as type, e2[0].speed as speed, e2[0].heading as heading, e2[0].eventId as eventId, 'STOPPED' as state, 'Vehicle slowed down or stopped' as information
	insert into waitingVehicles;
end;